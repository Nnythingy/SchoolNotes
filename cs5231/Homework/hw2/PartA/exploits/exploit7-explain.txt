Please provide an explanation about how you generate the payload for program7 to read victim's secret.

- ROP gadgets & syscalls used:  
pop and return - 0x56556383 | 0x56556393 (after adding sleep)
pop, pop and return - 0x56556382 | 0x56556392 (after adding sleep)


- The layout and expected behavior (per gadget) of your exploit code on the stack:  
AAAA... to overflow buffer
pop and return
original f pointer, to help fclose()
new fopen
pop, pop and return fopen variable addresses
trickme address
fie descriptor of new fopen

- Did you meet the problem that addresses inside/outside GDB are different? If so, how did you overcome it?
yes, the file pointer after the 2nd fopen was in different addresses. This had to be solved by adding a sleep function in the original program7.c, then change exploit7-run.sh to bg after running, then find the pid of the running /tmp/program7, then use gdb attach pid to attach to the session and debug from there.


- Other comments:  
Doing this assignment was nothing like in the lecture notes and is unnecessarily complicated with the different addresses. Please update the lecture to teach what is being tested in the assignments.
