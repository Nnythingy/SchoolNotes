1. a) F (tailed linked list needs to reassign nodes)
   b) F (need at least o(n))
   c) F, to remove bottom elemnt requires n 
   d) T
   e) F 
   f) F

2. public void swap(int index) {
        
	case 1: less than 2, no swapping
	case 2: 2, just swap head and tail
	
	if (index > this.size) {
            index = index mod this.size;
        }

        Node opNode = this.head;
        for(int i = 1; i < index; i++) {
            opNode = opNode.next;
        }
    }

3. int i = 0;

   while(arr[i] != personName) {
	i++;
   }

   int lastPersonPosition;

   for(int j = i; j < lastPersonPosition; j--) {
	arr[i] = arr[i+1];
	
   }

   lastperson Position = null;

4. Go to bottom to retrieve all the oprands, then add,
	O(nlogn)

