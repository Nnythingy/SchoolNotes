# Bug Category: Logic Authentication Flaw

# The logical flow of case12 is: 
# 1. a user can first register an account with a unique username and email, then subsequently input a suitable password and confirm that password
# 2. the user will then login using the registered email and password, the site will then check against its database if this login is valid
# 3. if valid, the user will then be logged in with his session and call a GET request to protected_page.php
# 4. if the GET request parameter admin is true and the site will show the flag as well

# In js/forms.js, the function formhash() will create a new parameter 'p', which will hash the value of the password given in the form with a sha512 hash and set that to the value of 'p'. The form will then hide the original password plaintext value by setting the value of password back to be empty ''.
# The function regformhash() in js/forms.js works in a similar way, with the inclusion of some checks and also setting confirmpwd value to be also empty. These 2 functions are thus only sending the hash of the password instead of the plaintext.

# In login.php, it will prompt users to either login or register if they are not yet logged in. After a user types in their email and password into the fields, this form data will run the function formhash() as described above. Then it will be send to includes/process_login.php
# includes/process_login.php will run the function login which is a function from includes/functions which will use the values from the POST request parameters email and p and check if the login is considered legitimate. If the login credentials are legitimate, then the user will be considered logged in and then referred to a new site protected_page.php which was described above
# If the login is not considered legitimate, then the user will be redirected to login.php with the parameter error set. This would load login.php with an additional text telling the user that there was an error logging in.

# In register.php, which users will be directed to to register a new account, it requires users to create a unique username and email, and create a password that fulfills the criterias. The function regformhash as described briefly above will run. This function will check through if the username and email are both unique. It will then check if the password input fits the criterias and if the confirmed password is the same as the password field. If all the checks are right, then it will hash the password set that as the value of parameter 'p', and then empty both the password and confirmpwd fields.

# In protected_page.php line 15, the function login_check from include/functions will check the current session running exists and does some check if the current session has a login_string and then check using the password field in the database with the user's http agent. This means that the session must be a legitimately logged in user first before being able to access protected_page.php

# Exploit: 
# to reveal the flag, one must send a GET request to the protected_page.php with the admin parameter value set to true. We must also first set up a session, this can be done with the python Request library.
# Hence, we must first register an account to ensure that our exploit is able to run on any instance. We can then send a POST request to register.php with the fields username, email, password='', confirmpwd='' and p with the value of a sha512 hash. In this exploit, the sha512 hash of Password1 is set. This will successfully create a user, then we would send a POST request to process_login.php with the parameters email, password='' and p. This would give us a logged in session. We then finally send a GET request to protected_page.php with the parameter admin=true to reveal the flag.

#!/bin/bash
python exploit12.py