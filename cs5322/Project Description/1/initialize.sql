-- Create user for schema
CREATE USER ecommerce IDENTIFIED BY pAssw0rd;
GRANT CREATE SESSION TO ECOMMERCE;
GRANT CREATE TABLE TO ECOMMERCE;
GRANT CREATE SEQUENCE TO ECOMMERCE;

-- Create application users
CREATE USER app_admin IDENTIFIED BY pAssw0rd;
CREATE USER seller_1 IDENTIFIED BY pAssw0rd;
CREATE USER customer_1 IDENTIFIED BY pAssw0rd;

-- Create necessary tables
CREATE TABLE users(
                      id VARCHAR2(36) NOT NULL,
                      username VARCHAR2(40) NOT NULL,
                      first_name VARCHAR2(60) NOT NULL,
                      last_name VARCHAR2(60),
                      email VARCHAR2(320),
                      password VARCHAR2(60) NOT NULL,
                      user_type VARCHAR2(12) NOT NULL,
                      account_standing VARCHAR(12) NOT NULL,
                      PRIMARY KEY (id),
                      CONSTRAINT user_type_check CHECK ( user_type IN ('CUSTOMER', 'SELLER', 'ADMIN') ),
                      CONSTRAINT account_standing_check CHECK ( account_standing IN ('ACTIVE', 'DELETED') )
);

CREATE TABLE products(
                         id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                         seller_id VARCHAR2(36) NOT NULL,
                         product_name VARCHAR(60) NOT NULL,
                         description VARCHAR(320),
                         price NUMBER(*, 2) NOT NULL,
                         stock_quantity NUMBER(*),
                         category VARCHAR(24),
                         PRIMARY KEY (id),
                         FOREIGN KEY (seller_id) REFERENCES users(id)
);

CREATE TABLE orders(
                       id VARCHAR2(36) NOT NULL,
                       user_id VARCHAR2(36) NOT NULL,
                       date_placed TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                       status VARCHAR2(12) NOT NULL,
                       PRIMARY KEY (id),
                       FOREIGN KEY (user_id) REFERENCES users(id),
                       CONSTRAINT status_check CHECK ( status IN ('PENDING', 'ACCEPTED', 'SHIPPED', 'COMPLETED', 'REFUNDED', 'CANCELLED') )
);

CREATE TABLE order_details(
                              id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                              order_id VARCHAR2(36) NOT NULL,
                              product_id NUMBER NOT NULL,
                              quantity NUMBER(*) NOT NULL,
                              price_at_purchase NUMBER(*, 2) NOT NULL,
                              PRIMARY KEY (id),
                              FOREIGN KEY (order_id) REFERENCES orders(id),
                              FOREIGN KEY (product_id) REFERENCES products(id)
);

CREATE TABLE reviews(
                        id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                        user_id VARCHAR2(36) NOT NULL,
                        product_id NUMBER NOT NULL,
                        rating NUMBER(*) NOT NULL,
                        content VARCHAR2(320),
                        PRIMARY KEY (id),
                        FOREIGN KEY (user_id) REFERENCES users(id),
                        FOREIGN KEY (product_id) REFERENCES products(id)
);

CREATE TABLE payments(
                         id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                         order_id VARCHAR2(36) NOT NULL,
                         payment_method VARCHAR(12) NOT NULL,
                         amount NUMBER(*, 2) NOT NULL,
                         payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                         PRIMARY KEY (id),
                         FOREIGN KEY (order_id) REFERENCES orders(id),
                         CONSTRAINT payment_method_check CHECK ( payment_method IN ('VISA', 'MASTERCARD', 'FAST', 'VOUCHER') )
);

CREATE TABLE shipping_details(
                                 id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                                 order_id VARCHAR2(36) NOT NULL,
                                 address VARCHAR2(240) NOT NULL,
                                 shipping_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                 delivery_date TIMESTAMP,
                                 status VARCHAR2(24),
                                 PRIMARY KEY (id),
                                 FOREIGN KEY (order_id) REFERENCES orders(id)
);

CREATE TABLE support_cases(
                              id VARCHAR2(36) NOT NULL,
                              order_id VARCHAR2(36) NOT NULL,
                              status VARCHAR2(12) NOT NULL,
                              comments VARCHAR2(320),
                              assigned_user VARCHAR2(36) NOT NULL,
                              last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                              PRIMARY KEY (id),
                              FOREIGN KEY (order_id) REFERENCES orders(id),
                              FOREIGN KEY (assigned_user) REFERENCES users(id),
                              CONSTRAINT support_status_check CHECK ( status IN ('OPEN', 'IN_PROGRESS', 'CLOSED', 'CANCELLED') )
);

-- DAC for application users
GRANT SELECT ON ecommerce.users TO app_admin, seller_1, customer_1;
GRANT UPDATE ON ecommerce.users TO app_admin, seller_1, customer_1;;
GRANT INSERT ON ecommerce.users TO app_admin, seller_1, customer_1;;

GRANT SELECT ON ecommerce.orders TO app_admin, seller_1, customer_1;
GRANT UPDATE ON ecommerce.orders TO app_admin;
GRANT INSERT ON ecommerce.orders TO app_admin;

GRANT SELECT ON ecommerce.order_details TO app_admin, seller_1, customer_1;
GRANT UPDATE ON ecommerce.order_details TO app_admin;
GRANT INSERT ON ecommerce.order_details TO app_admin;

GRANT SELECT ON ecommerce.payments TO app_admin, seller_1, customer_1;
GRANT UPDATE ON ecommerce.payments TO app_admin;
GRANT INSERT ON ecommerce.payments TO app_admin;

GRANT SELECT ON ecommerce.products TO app_admin, seller_1, customer_1;
GRANT UPDATE ON ecommerce.products TO app_admin, seller_1;
GRANT INSERT ON ecommerce.products TO app_admin, seller_1;

GRANT SELECT ON ecommerce.reviews TO app_admin, seller_1, customer_1;
GRANT UPDATE ON ecommerce.reviews TO app_admin, customer_1;
GRANT INSERT ON ecommerce.reviews TO app_admin, customer_1;

GRANT SELECT ON ecommerce.shipping_details TO app_admin, seller_1, customer_1;
GRANT UPDATE ON ecommerce.shipping_details TO app_admin, seller_1;
GRANT INSERT ON ecommerce.shipping_details TO app_admin, seller_1;

GRANT SELECT ON ecommerce.shipping_details TO app_admin, seller_1, customer_1;
GRANT UPDATE ON ecommerce.shipping_details TO app_admin;
GRANT INSERT ON ecommerce.shipping_details TO app_admin;
